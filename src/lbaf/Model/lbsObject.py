#
#@HEADER
###############################################################################
#
#                                 lbsObject.py
#               DARMA/LB-analysis-framework => LB Analysis Framework
#
# Copyright 2019-2024 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact darma@sandia.gov
#
###############################################################################
#@HEADER
#
from typing import Optional

from .lbsBlock import Block
from .lbsObjectCommunicator import ObjectCommunicator
from .lbsQOIDecorator import qoi, entity_property

class Object:
    """A class representing an object with load and communicator

    Constructor arguments:
    :arg seq_id: small int identifier, commonly the task index, defaults to None
    :arg packed_id: alt identifier (generated by vt as a bitpacked value), defaults to None
    :arg r_id: rank ID, defaults to None
    :arg load: the computational time, also known as load, defaults to 0.0
    :arg size: the size, defaults to 0.0
    :arg comm: the communicator, defaults to None
    :arg user_defined: user defined data dict, defaults to None
    :arg subphases: list of subphases, defaults to None
    :arg collection_id: collection id (required for migratable objects)
    :arg index: the n-dimensional index for an object that belongs to a collection
    """

    def __init__(
        self,
        seq_id: Optional[int] = None,
        packed_id: Optional[int] = None,
        r_id: Optional[int]=None,
        load: float=0.0,
        size: float=0.0,
        comm: Optional[ObjectCommunicator]=None,
        user_defined: dict=None,
        subphases: list=None,
        collection_id: Optional[int] = None,
        index: Optional[list] = None):

        # Check that id is provided as defined in LBDatafile schema
        if packed_id is None and seq_id is None:
            raise ValueError("Either `packed_id` (bit-encoded ID) or `id` (seq ID) must be provided.")

        # Object ID
        if seq_id is not None and (
            not isinstance(seq_id, int) or isinstance(seq_id, bool)):
            raise TypeError(
                f"seq_id: incorrect type {type(seq_id)}")
        self.__seq_id: Optional[int] = seq_id

        if packed_id is not None and (
            not isinstance(packed_id, int) or isinstance(packed_id, bool)):
            raise TypeError(
                f"packed_id: incorrect type {type(packed_id)}")
        self.__packed_id: Optional[int] = packed_id

        # Nonnegative load required to perform the work of this object
        if not isinstance(load, (int, float)) or isinstance(load, bool) or load < 0.0:
            raise TypeError(
                f"load: incorrect type {type(load)} or value: {load}")
        self.__load = float(load)

        # Nonnegative size required to for memory footprint of this object
        if not isinstance(size, (int, float)) or isinstance(size, bool) or size < 0.0:
            raise TypeError(
                f"size: incorrect type {type(size)} or value: {size}")
        self.__size = float(size)

        # Rank to which object is currently assigned if defined
        if not(r_id is None or isinstance(r_id, int)) or isinstance(r_id, bool):
            raise TypeError(
                f"r_id: incorrect type {type(r_id)}")
        self.__rank_id = r_id

        # Communication graph of this object if defined
        if not(isinstance(comm, ObjectCommunicator) or comm is None):
            raise TypeError(
                f"comm: {comm} is of type {type(comm)}. Must be <class 'ObjectCommunicator'>.")
        self.__communicator: ObjectCommunicator = comm

        # Initialize other instance variables
        self.__overhead = 0.0
        self.__shared_block: Optional[Block] = None

        # Initialize currently unused parameters (for writing back out)
        self.__unused_params = {}

        # collection_id is not used in LBAF but is required for migratable objects in vt
        self.__collection_id = collection_id
        self.__index = index

        # Retrieve and set optionally defined fields
        if isinstance(user_defined, dict) or user_defined is None:
            self.__user_defined = user_defined
        else:
            raise TypeError(f"user_defined: {user_defined} is of type {type(user_defined)}. Must be <class 'dict'>.")
        if user_defined:
            # Object size is by definition its memory footprint
            if not isinstance((
                size := user_defined.get("task_footprint_bytes", 0.0)),
                (int, float)
            ) or isinstance(size, bool) or size < 0.0:
                raise TypeError(f"size: incorrect type {type(size)} or value: {size}")
            self.__size = float(size)

            # Object overhead is by definition its additional working memory
            if not isinstance((
                overhead := user_defined.get("task_working_bytes", 0.0)),
                (int, float)
            ) or isinstance(overhead, bool) or overhead < 0.0:
                raise TypeError(f"overhead: incorrect type {type(overhead)} or value: {overhead}")
            self.__overhead = float(overhead)

        # Sub-phases
        if isinstance(subphases, list) or subphases is None:
            self.__subphases = subphases
        else:
            raise TypeError(f"subphases: {subphases} is of type {type(subphases)} but must be <class 'list'>")

    def __repr__(self):
        return f"Object id: {self.get_id()}, load: {self.__load}"

    @entity_property
    def get_id(self) -> int:
        """Return object bit-packed ID if available. Else return the object seq ID"""
        return self.__packed_id if self.__packed_id is not None else self.__seq_id

    @entity_property
    def get_packed_id(self) -> Optional[int]:
        """Return object bit-packed ID (seq_id, home_id, migratable)."""
        return self.__packed_id

    @entity_property
    def get_seq_id(self) -> Optional[int]:
        """Return object seq ID."""
        return self.__seq_id

    @entity_property
    def get_collection_id(self) -> Optional[int]:
        """Return object collection ID (required for migratable objects)."""
        return self.__collection_id

    def set_collection_id(self, collection_id: Optional[int]):
        """ Set object collection ID (required for migratable objects)."""
        self.__collection_id = collection_id

    @entity_property
    def get_index(self) -> Optional[list]:
        """Return the object's index."""
        return self.__index

    def set_index(self, index: Optional[list]):
        """Set an object's index."""
        self.__index = index

    def set_load(self, load: float):
        """ Set object load."""
        self.__load = load

    @qoi
    def get_load(self) -> float:
        """Return object load."""
        return self.__load

    @qoi
    def get_size(self) -> float:
        """Return object size."""
        return self.__size

    @qoi
    def get_overhead(self) -> float:
        """Return additional runtime memory of object."""
        return self.__overhead

    def get_user_defined(self) -> dict:
        """Return optionally defined fields"""
        return self.__user_defined

    def get_sent(self) -> dict:
        """Return communications sent by object to other objects."""
        return self.__communicator.get_sent() if self.__communicator else {}

    def get_received(self) -> dict:
        """Return communications received by object from other objects."""

        return self.__communicator.get_received() if self.__communicator else {}

    @qoi
    def get_received_volume(self) -> float:
        """Return volume of communications received by object."""
        v : float = 0.0
        v += sum(v for v in self.__communicator.get_received().values()) if self.__communicator else 0.0
        return v

    @qoi
    def get_sent_volume(self) -> float:
        """Return volume of communications sent by object."""
        v : float = 0.0
        v += sum(v for v in self.__communicator.get_sent().values()) if self.__communicator else 0.0
        return v

    @qoi
    def get_max_volume(self) -> float:
        """Return the maximum bytes received or sent by object."""
        v : float = 0.0
        v += self.__communicator.get_max_volume() if self.__communicator else 0.0
        return v

    def set_rank_id(self, r_id: int) -> None:
        """Assign object to rank ID"""
        self.__rank_id = r_id

    @qoi
    def get_rank_id(self) -> int:
        """Return ID of rank to which object is currently assigned."""
        return self.__rank_id

    def set_shared_block(self, b: Optional[Block]) -> None:
        """Assign shared memory block when necessary."""
        if b is not None and not isinstance(b, Block):
            raise TypeError(f"shared block: incorrect type {type(b)}")
        self.__shared_block = b

    def get_shared_block(self) -> Optional[Block]:
        """Return shared memory block assigned to object."""
        return self.__shared_block

    @qoi
    def get_shared_id(self) -> Optional[int]:
        """Return ID of shared memory block assigned to object."""
        return self.__shared_block.get_id() if self.__shared_block is not None else None

    def has_communicator(self) -> bool:
        """Return whether the object has communication graph data."""
        return self.__communicator is not None

    def get_communicator(self) -> ObjectCommunicator:
        """Return the communication graph for this object."""
        return self.__communicator

    def set_communicator(self, c) -> None:
        """Assign the communication graph for this object."""

        if not isinstance(c, ObjectCommunicator):
            raise TypeError(f"object communicator: incorrect type {type(c)}")
        self.__communicator = c

    def get_subphases(self) -> list:
        """Return subphases of this object."""
        return self.__subphases

    def set_unused_params(self, unused_params: dict):
        """Assign any extraneous parameters."""
        self.__unused_params = unused_params

    def get_unused_params(self) -> dict:
        """Return all current unused parameters."""
        return self.__unused_params

    def __get_qoi_name(self, ftn_name) -> str:
        """Return the QOI name from the given QOI getter function"""
        name = ftn_name[4:] if ftn_name.startswith("get_") else ftn_name
        if name == "size":
            name = "object_memory"
        elif name == "overhead":
            name = "overhead_memory"
        return name

    def __get_qois_of_type(self, qoi_type: str) -> list:
        """
        Returns a dict of all qois with the specified qoi_type
        (either 'qoi' or 'entity_property'.)
        """
        attr = f"is_{qoi_type}"
        qoi_methods : dict = {
            self.__get_qoi_name(name): getattr(self, name)
            for name in dir(self)
            if callable(getattr(self, name)) and \
                not name.startswith("__") and \
                hasattr(getattr(self, name), attr) }
        return qoi_methods

    def get_qois(self, qoi_type=None):
        """
        Get all methods with specified 'qoi_type' decorator.

        Params:
            - qoi_type: None (default) returns all decorated functions.
                        "entity_property" returns all entity properties
                        "qoi" returns all derived quantities of interest
        """
        if qoi_type is not None:
            return self.__get_qois_of_type(qoi_type)
        qois = self.__get_qois_of_type("qoi")
        qois.update(self.__get_qois_of_type("entity_property"))
        return qois